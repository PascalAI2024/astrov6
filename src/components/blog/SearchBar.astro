---
interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
---

<div class={`relative ${className}`}>
  <div class="absolute inset-0 bg-gradient-to-r from-cosmic-600/20 to-purple-600/20 rounded-lg blur-lg opacity-75"></div>
  
  <div class="relative">
    <input
      type="search"
      id="blog-search"
      placeholder="Search articles..."
      class="w-full px-4 py-3 bg-gray-900/50 border border-white/10 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-cosmic-500 focus:border-transparent transition-all"
    />
    <div class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400">
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
      </svg>
    </div>
  </div>

  <!-- Search Results -->
  <div id="search-results" class="absolute left-0 right-0 mt-2 bg-gray-900/95 border border-white/10 rounded-lg shadow-xl backdrop-blur-lg hidden z-50">
    <div class="p-4">
      <div id="results-content" class="space-y-4"></div>
    </div>
  </div>
</div>

<script>
import { posts } from '../../data/posts';

class BlogSearch {
  private input: HTMLInputElement | null;
  private results: HTMLElement | null;
  private resultsContent: HTMLElement | null;
  private debounceTimeout: number | null = null;

  constructor() {
    this.input = document.getElementById('blog-search') as HTMLInputElement;
    this.results = document.getElementById('search-results');
    this.resultsContent = document.getElementById('results-content');
    
    if (this.input && this.results && this.resultsContent) {
      this.setupEventListeners();
    }
  }

  private setupEventListeners(): void {
    if (!this.input || !this.results) return;

    this.input.addEventListener('input', () => this.handleSearch());
    this.input.addEventListener('focus', () => this.showResults());
    
    document.addEventListener('click', (e) => {
      if (!this.results?.contains(e.target as Node) && 
          !this.input?.contains(e.target as Node)) {
        this.hideResults();
      }
    });
  }

  private handleSearch(): void {
    if (this.debounceTimeout) {
      clearTimeout(this.debounceTimeout);
    }

    this.debounceTimeout = window.setTimeout(() => {
      if (!this.input || !this.resultsContent) return;

      const query = this.input.value.toLowerCase();
      
      if (query.length < 2) {
        this.hideResults();
        return;
      }

      const results = posts.filter(post => 
        post.title.toLowerCase().includes(query) ||
        post.excerpt.toLowerCase().includes(query) ||
        post.tags.some(tag => tag.toLowerCase().includes(query))
      ).slice(0, 5);

      this.displayResults(results);
    }, 300);
  }

  private displayResults(results: typeof posts): void {
    if (!this.resultsContent) return;

    if (results.length === 0) {
      this.resultsContent.innerHTML = `
        <div class="text-center text-gray-400 py-4">
          No articles found
        </div>
      `;
    } else {
      this.resultsContent.innerHTML = results.map(post => `
        <a href="/blog/${post.slug}" class="block group">
          <div class="flex items-start gap-4 p-4 rounded-lg hover:bg-gray-800/50 transition-colors">
            <img 
              src="${post.imageUrl || '/images/blog/default.jpg'}" 
              alt="${post.title}"
              class="w-16 h-16 rounded object-cover"
              loading="lazy"
              onerror="this.src='/images/blog/default.jpg'"
            />
            <div>
              <h3 class="text-white group-hover:text-cosmic-400 transition-colors">
                ${post.title}
              </h3>
              <p class="text-sm text-gray-400 line-clamp-2">
                ${post.excerpt}
              </p>
            </div>
          </div>
        </a>
      `).join('');
    }

    this.showResults();
  }

  private showResults(): void {
    if (!this.results || !this.input) return;
    if (this.input.value.length >= 2) {
      this.results.classList.remove('hidden');
    }
  }

  private hideResults(): void {
    this.results?.classList.add('hidden');
  }
}

// Initialize search when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  new BlogSearch();
});
</script>